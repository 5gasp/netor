import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class TranslationService {

  keyTranslations = {
    allocatedResources: "Allocated Resources",
    diskStorage: "Disk Storage Space",
    memoryRAM: "RAM Capacity",
    vCPU: "Number of CPUs",
    password: "Password",
    sla: "Service Level Agreement",
    id: "Identifier",
    slaConstraints: "Service Level Agreement Defined Constraints",
    location: "Location",
    maxResourceLimit: "Service Level Agreement Maximum Resource Limitation",
    scope: "Scope",
    slaStatus: "Service Level Agreement Status",
    username: "Username",
    vsdId: "Vertical Slice Descriptor Identifiers",
    vsiId: "Vertical Slice Instances Identifiers",
    remoteTenantInfos: "Remote Tenants",
    host: "Host",
    remoteTenantName: "Remote Tenant Name",
    remoteTenantPwd: "Remote Tenant Password",
    name: "Name",
    activeVsdId: "Active VSD's",
    onBoardedMecAppPackageInfoId: "Onboarded MEC App Packages",
    onBoardedNsdInfoId: "Onboarded NSD Packages",
    onBoardedVnfPackageInfoId: "Onboarded VNF Packages",
    vsBlueprint: "Blueprint",
    applicationMetrics: "Application Metrics",
    interval: "Interval",
    metricCollectionType: "Collection Type",
    metricId: "ID",
    topic: "Topic",
    unit: "Unit",
    atomicComponents: "Atomic Components",
    componentId: "ID",
    endPointsIds: "Endpoint ID",
    imageUrls: "Images URL",
    lifecycleOperations: "Lifecycle Operations",
    serversNumber: "Servers Number",
    compatibleContextBlueprint: "Compatible Blueprint",
    compatibleSites: "Compatible Sites",
    configurableParameters: "Configurable Parameters",
    connectivityServices: "Connectivity Services",
    connectivityProperties: "Properties",
    endPointIds: "Endpoint ID",
    external: "External",
    description: "Description",
    endPoints: "Endpoints",
    endPointId: "Endpoint ID",
    management: "Management",
    ranConnection: "RAN Connection",
    imgUrl: "Image URL",
    parameters: "Parameters",
    applicabilityField: "Applicability Field",
    parameterDescription: "Description",
    parameterId: "ID",
    parameterName: "Name",
    parameterType: "Type",
    serviceSequence: "Service Sequence",
    hopEndPoints: "Hop Endpoints",
    vsCompoentId: "VS Component ID",
    service_category: "Service Category",
    service_type: "Service Type",
    version: "Version",
    vsBlueprintId: "Blueprint ID",
    vsBlueprintVersion: "Blueprint Version",
    managementType: "Management Type",
    qosParameters: "QoS Parameters",
    activityFactor: "Activity Factor",
    availability: "Availability",
    coverage: "Coverage",
    serviceConstraints: "Service Constraints",
    atomicComponentId: "Atomic Component ID",
    canIncludeSharedElements: "Includes Shared Elements",
    nonPreferredProviders: "Non-Preferred Providers",
    preferredProviders: "Preferred Providers",
    priority: "Priority",
    prohibitedProviders: "Prohibited Providers",
    sharable: "Sharable",
    availabilityCoverage: "Availability Coverage",
    lowCostRequired: "Low Cost required",
    serviceCreationTime: "Service Creation Time",
    sst: "SST",
    vsDescriptorId: "Descriptor ID",
    nsdId: "NSD ID",
    nsdVersion: "NSD Version",
    nstId: "NST ID",
    nsstIds: "NSST ID",
    nstName: "NST Name",
    nstProvider: "NST Provider",
    nstServiceProfile: "NST Service Profile",
    coverageAreaTAList: "Coverage Area List",
    eMBBPerfReq: "EMBB Performance Requirements",
    areaTrafficCapDL: "Area Traffic Capacity Down-Link",
    areaTrafficCapUL: "Area Traffic Capacity Up-Link",
    expDataRateDL: "Expected Data Rate Down-Link",
    expDataRateUL: "Expected Data Rate Up-Link",
    uESpeed: "User Equipment Speed",
    userDensity: "User Density",
    latency: "Latency",
    maxNumberofUEs: "Maximum Number of User Equipments",
    pLMNIdList: "PLMN ID",
    resourceSharingLevel: "Resource Sharing Level",
    sST: "SST",
    serviceProfileId: "Service Profile ID",
    uEMobilityLevel: "User Equipment Mobility Level",
    nstVersion: "NST Version",
    nsiId: "NSI ID",
    status: "Status",
    errorMessage: "Error Message",
    externalInterconnections: "External Inter-Connections",
    internalInterconnections: "Internal Inter-Connections",
    monitoringUrl: "Monitoring URL",
  }

  constructor() { }

  translate(key) {
    if (key in this.keyTranslations) {
      return this.keyTranslations[key]
    }
    return key
  }
}
