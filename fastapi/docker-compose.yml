# @Author: Daniel Gomes
# @Date:   2022-07-26 16:07:53
# @Last Modified by:   Daniel Gomes
# @Last Modified time: 2022-10-30 22:18:46

version: "3.6"
services:
  coordinator:
    build:
        dockerfile: docker/coordinator/Dockerfile
        context: ./
    depends_on:
      - "db"
      - "rabbitmq"
      - "redis"
    ports:
      - 8000:80
    environment:
      - INFLUX_DB_URL=${INFLUXDB_URL}
      - INFLUX_DB_NAME=${INFLUXDB_NAME}
      - IMAGE_NAME=COORDINATOR
      - INFLUX_USERNAME=${INFLUXDB_USER}
      - INFLUXDB_PASSWORD=${INFLUXDB_USER_PASSWORD}
    volumes:
      - ./config_files/config.ini:/app/config.ini

  # tenant:
  #   build:
  #     dockerfile: docker/tenant/Dockerfile
  #     context: ./
  #   depends_on:
  #     - "db"
  #   ports:
  #     - 8001:80
  #   environment:
  #     - INFLUX_DB_URL=${INFLUXDB_URL}
  #     - INFLUX_DB_NAME=${INFLUXDB_NAME}
  #     - IMAGE_NAME=TENANT
  #     - INFLUX_USERNAME=${INFLUXDB_USER}
  #     - INFLUXDB_PASSWORD=${INFLUXDB_USER_PASSWORD}
  #   volumes:
  #     - ./config_files/config.ini:/app/config.ini
  domain:
    build:
      dockerfile: docker/domain/Dockerfile
      context: ./
    depends_on:
      - "db"
    ports:
      - 8002:80
    environment:
      - INFLUX_DB_URL=${INFLUXDB_URL}
      - INFLUX_DB_NAME=${INFLUXDB_NAME}
      - IMAGE_NAME=DOMAIN
      - INFLUX_USERNAME=${INFLUXDB_USER}
      - INFLUXDB_PASSWORD=${INFLUXDB_USER_PASSWORD}
    volumes:
      - ./config_files/config.ini:/app/config.ini
  placement:
    build:
      dockerfile: docker/placement/Dockerfile
      context: ./
    depends_on:
      - "db"
    ports:
      - 8003:80
    environment:
      - INFLUX_DB_URL=${INFLUXDB_URL}
      - INFLUX_DB_NAME=${INFLUXDB_NAME}
      - IMAGE_NAME=PLACEMENT
      - INFLUX_USERNAME=${INFLUXDB_USER}
      - INFLUXDB_PASSWORD=${INFLUXDB_USER_PASSWORD}
    volumes:
      - ./config_files/config.ini:/app/config.ini
  manager:
    build:
      dockerfile: docker/manager/Dockerfile
      context: ./
    depends_on:
      - "db"
      - "rabbitmq"
      - "redis"
    ports:
      - 8004:80
    environment:
      - INFLUX_DB_URL=${INFLUXDB_URL}
      - INFLUX_DB_NAME=${INFLUXDB_NAME}
      - IMAGE_NAME=MANAGER
      - INFLUX_USERNAME=${INFLUXDB_USER}
      - INFLUXDB_PASSWORD=${INFLUXDB_USER_PASSWORD}
    volumes:
     - ./config_files/config.ini:/app/config.ini
  
  catalogue:
    build:
        dockerfile: docker/catalogue/Dockerfile
        context: ./
    restart: always
    ports:
      - 5010:5010
    depends_on:
      - mongo1
    environment:
      APPLICATION_NAME: catalogues
      MONGO_USERNAME: catalogues
      MONGO_PASSWORD: catalogues
      MONGO_URL: mongo1
      MONGO_DB: catalogues
      SECRET_KEY: tenantManager
      RABBIT_HOST: rabbitmq
      RABBIT_USERNAME: admin
      RABBIT_PASSWORD: admin
      IDP_IP: 10.0.12.149
      IDP_PORT: 8001
      IDP_ENDPOINT: /oauth/validate/
      ENVIRONMENT: prod
      INFLUX_DB_URL: ${INFLUXDB_URL}
      INFLUX_DB_NAME: ${INFLUXDB_NAME}
      IMAGE_NAME: CATALOGUE
      INFLUX_USERNAME: ${INFLUXDB_USER}
      INFLUXDB_PASSWORD: ${INFLUXDB_USER_PASSWORD}
    volumes:
     - ./config_files/client_secrets.json:/app/api/client_secrets.json
  db:
    build:
      dockerfile: postgresql/Dockerfile
      context: ./
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_PASSWORD=password 
      - POSTGRES_USER=postgres
      - POSTGRES_DB=5gasp 
      - INFLUX_DB_URL=${INFLUXDB_URL}
      - INFLUX_DB_NAME=${INFLUXDB_NAME}
      - IMAGE_NAME=DB
      - INFLUX_USERNAME=${INFLUXDB_USER}
      - INFLUXDB_PASSWORD=${INFLUXDB_USER_PASSWORD}    
    volumes:
      - thesisPostgresVolume:/var/lib/postgresql/data
  
  mongo1:
    image: docker.io/bitnami/mongodb-sharded:4.2
    hostname: mongo1
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongo1
      - MONGODB_SHARDING_MODE=mongos
      - MONGODB_MONGOS_HOST=mongo1
      - MONGODB_CFG_PRIMARY_HOST=mongodb-cfg
      - MONGODB_CFG_REPLICA_SET_NAME=cfgreplicaset
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
      - MONGODB_ROOT_PASSWORD=root
    ports:
      - "27017:27017"

  secondary_mongo1:
    image: docker.io/bitnami/mongodb-sharded:4.2
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=secondary_mongo1
      - MONGODB_SHARDING_MODE=shardsvr
      - MONGODB_MONGOS_HOST=mongo1
      - MONGODB_ROOT_PASSWORD=root
      - MONGODB_USERNAME=catalogues
      - MONGODB_PASSWORD=catalogues 
      - MONGODB_DATABASE=catalogues 
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
      - MONGODB_REPLICA_SET_NAME=shard0
    volumes:
      - 'shard0_data:/bitnami'

  mongodb-cfg:
    image: docker.io/bitnami/mongodb-sharded:4.2
    volumes:
      - 'cfg_data:/bitnami'
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-cfg
      - MONGODB_SHARDING_MODE=configsvr
      - MONGODB_ROOT_PASSWORD=root
      - MONGODB_USERNAME=catalogues
      - MONGODB_PASSWORD=catalogues 
      - MONGODB_DATABASE=catalogues 
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
      - MONGODB_REPLICA_SET_NAME=cfgreplicaset
  redis:
    build:
      dockerfile: docker/redis/Dockerfile
      context: ./
    restart: always
    command: redis-server --requirepass netorRedisPassword
    ports:
      - "6379:6379"
    volumes:
      - thesisRedisVolume:/var/lib/redis
      - thesisRedisDataVolume:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf 
    environment:
      - REDIS_REPLICATION_MODE=master
      - INFLUX_DB_URL=${INFLUXDB_URL}
      - INFLUX_DB_NAME=${INFLUXDB_NAME}
      - IMAGE_NAME=REDIS
      - INFLUX_USERNAME=${INFLUXDB_USER}
      - INFLUXDB_PASSWORD=${INFLUXDB_USER_PASSWORD}
  
  redisplacement:
    build:
      dockerfile: docker/redis/Dockerfile
      context: ./
    restart: always
    command: redis-server --requirepass netorRedisPassword --port 6380
    ports:
      - "6380:6380"
    volumes:
      - thesisRedisPlacementVolume:/var/lib/redis
      - thesisRedisPlacementDataVolume:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf 
    environment:
      - REDIS_REPLICATION_MODE=master
      - INFLUX_DB_URL=${INFLUXDB_URL}
      - INFLUX_DB_NAME=${INFLUXDB_NAME}
      - IMAGE_NAME=REDISPLACEMENT
      - INFLUX_USERNAME=${INFLUXDB_USER}
      - INFLUXDB_PASSWORD=${INFLUXDB_USER_PASSWORD}
  

  rabbitmq:
    build:
      dockerfile: docker/rabbitmq/Dockerfile
      context: ./
    restart: always
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "admin"
      INFLUX_DB_URL: ${INFLUXDB_URL}
      INFLUX_DB_NAME: ${INFLUXDB_NAME}
      IMAGE_NAME: RABBITMQ
      INFLUX_USERNAME: ${INFLUXDB_USER}
      INFLUXDB_PASSWORD: ${INFLUXDB_USER_PASSWORD}

    volumes:
      - thesisRabbitVolume:/var/lib/rabbitmq
  db_dns:
    image: mariadb:latest
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
      - MYSQL_DATABASE=powerdnsadmin
      - MYSQL_USER=pdns
      - MYSQL_PASSWORD=mypdns
    ports:
      - 3306:3306
    restart: always
    volumes:
      - /pda-mysql:/var/lib/mysql
  pdns:
    #build: pdns
    image: pschiffe/pdns-mysql
    hostname: pdns
    domainname: computingforgeeks.com
    restart: always
    depends_on:
      - db_dns
    links:
      - "db_dns:mysql"
    ports:
      - "9000:53"
      - "9000:53/udp"
      - "8081:8081"
    environment:
      - PDNS_gmysql_host=db_dns
      - PDNS_gmysql_port=3306
      - PDNS_gmysql_user=pdns
      - PDNS_gmysql_dbname=powerdnsadmin
      - PDNS_gmysql_password=mypdns
      - PDNS_master=yes
      - PDNS_api=yes
      - PDNS_api_key=secret # Todo - Update on deployment
      - PDNSCONF_API_KEY=secret # Todo - Update on deployment
      - PDNS_webserver=yes
      - PDNS_webserver-allow-from=0.0.0.0/0
      - PDNS_webserver_address=0.0.0.0
      - PDNS_webserver_password=secret2 # Todo - Update on deployment
      - PDNS_version_string=anonymous
      - PDNS_default_ttl=1500
      - PDNS_allow_notify_from=0.0.0.0
      - PDNS_allow_axfr_ips=127.0.0.1

  web_app:
    image: ngoduykhanh/powerdns-admin:latest
    container_name: powerdns_admin
    ports:
      - "8080:80"
    depends_on:
      - db_dns
    restart: always
    links:
      - db_dns:mysql
      - pdns:pdns
    logging:
      driver: json-file
      options:
        max-size: 50m
    environment:
      - SQLALCHEMY_DATABASE_URI=mysql://pdns:mypdns@db_dns/powerdnsadmin
      - GUNICORN_TIMEOUT=60
      - GUNICORN_WORKERS=2
      - GUNICORN_LOGLEVEL=DEBUG
 
volumes:
  thesisPostgresVolume:
    external: false
  thesisRabbitVolume:
    external: false
  thesisRedisVolume:
    external: false
  thesisRedisPlacementVolume:
    external: false
  thesisRedisPlacementDataVolume:
    external: false
  thesisRedisDataVolume:
    external: false
  shard0_data:
    external: false
  cfg_data:
    external: false
  
networks:
  default:
    driver: bridge
    name: tickStack