version: "3.6"
services:
  rabbitmq:
    image: 'rabbitmq:3.6-management-alpine'
    restart: always
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "admin"
    volumes:
      - thesisRabbitVolume:/var/lib/rabbitmq

  postgres:
    image: postgres:12.2-alpine
    restart: always
    volumes:  
      - thesisPostgresVolume:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=postgres 
      - POSTGRES_USER=postgres
    ports:
      - 5432:5432

  redis:
    image: "redis:alpine"
    restart: always
    command: redis-server --requirepass netorRedisPassword
    ports:
      - "6379:6379"
    volumes:
      - thesisRedisVolume:/var/lib/redis
      - thesisRedisDataVolume:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf 
    environment:
      - REDIS_REPLICATION_MODE=master

  mongo1:
    image: netor/mongo1
    ports:
      - 27017:27017
    restart: always
    volumes:
      - thesisMongo1ConfigVolume:/data/configdb
      - thesisMongo1DataVolume:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      CATALOGUES_DATABASE: catalogues
      CATALOGUES_USERNAME: catalogues
      CATALOGUES_PASSWORD: catalogues

  mongo2:
    depends_on:
      - mongo1
    image: netor/mongo2
    ports:
      - 27012:27017
    restart: always
    volumes:
      - thesisMongo2ConfigVolume:/data/configdb
      - thesisMongo2DataVolume:/data/db
    environment:
      DATABASE_NAME: catalogues
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root

  mongo3:
    depends_on:
      - mongo1
    image: netor/mongo3
    ports:
      - 27013:27017
    restart: always
    volumes:
      - thesisMongo3ConfigVolume:/data/configdb
      - thesisMongo3DataVolume:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root

  netor_up_nginx: 
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
      - 443:443

  netor_coordinator:
    image: netor/coordinator
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    ports:
      - '5000:5000'
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASS: "postgres"
      POSTGRES_DB: "vsLCM"
      POSTGRES_IP: postgres
      APP_SECRET: "tenantManager"
      RABBIT_USER: "admin"
      RABBIT_PASS: "admin"
      RABBIT_IP: rabbitmq
      IDP_IP: netor_tenant
      ENVIRONMENT: prod

  netor_domain:
    image: netor/domain
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    ports:
      - '5001:5001'
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASS: "postgres"
      POSTGRES_DB: "vsDomain"
      POSTGRES_IP: postgres
      APP_SECRET: "tenantManager"
      RABBIT_USER: "admin"
      RABBIT_PASS: "admin"
      RABBIT_IP: rabbitmq
      IDP_IP: netor_tenant
      ENVIRONMENT: prod

  netor_manager:
    image: netor/manager
    restart: always
    depends_on:
      - redis
      - rabbitmq
    ports:
      - '5555:5555'
    environment:
      APP_SECRET: "tenantManager"
      RABBIT_USER: "admin"
      RABBIT_PASS: "admin"
      RABBIT_IP: rabbitmq
      REDIS_HOST: redis
      ENVIRONMENT: prod

  netor_placement:
    image: netor/placement
    restart: always
    depends_on:
      - redis
      - rabbitmq
    environment:
      RABBIT_USER: "admin"
      RABBIT_PASS: "admin"
      RABBIT_IP: rabbitmq
      REDIS_HOST: redis
      ENVIRONMENT: prod

  netor_tenant:
    image: netor/tenant
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    ports:
      - '5002:5002'
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASS: "postgres"
      POSTGRES_DB: "vsTenant"
      POSTGRES_IP: postgres
      APP_SECRET: "tenantManager"
      RABBIT_USER: "admin"
      RABBIT_PASS: "admin"
      RABBIT_IP: rabbitmq
      ENVIRONMENT: prod

  netor_catalogue:
    image: netor/catalogue
    restart: always
    ports:
      - 5010:5010
    depends_on:
      - mongo1
    environment:
      APPLICATION_NAME: catalogues
      MONGO_USERNAME: catalogues
      MONGO_PASSWORD: catalogues
      MONGO_URL: mongo1
      MONGO_DB: catalogues
      SECRET_KEY: tenantManager
      RABBIT_HOST: rabbitmq
      RABBIT_USERNAME: admin
      RABBIT_PASSWORD: admin
      IDP_IP: netor_tenant
      IDP_PORT: 5002
      IDP_ENDPOINT: /validate
      ENVIRONMENT: prod

  # netor_portal:
  #   image: netor/portal
  #   restart: always
  #   ports:
  #     - '4200:4200'
  #   environment:
  #     NETOR_ENDPOINT: netor_up_nginx

volumes:
  thesisPostgresVolume:
    external: false
  thesisRabbitVolume:
    external: false
  thesisRedisVolume:
    external: false
  thesisRedisDataVolume:
    external: false
  thesisMongo1ConfigVolume:
    external: false
  thesisMongo1DataVolume:
    external: false
  thesisMongo2ConfigVolume:
    external: false
  thesisMongo2DataVolume:
    external: false
  thesisMongo3ConfigVolume:
    external: false
  thesisMongo3DataVolume:
    external: false