# @Author: Rafael Direito
# @Date:   2022-08-19 16:06:31
# @Last Modified by:   Rafael Direito
# @Last Modified time: 2022-08-19 18:50:57
version: "3.6"
services:
  rabbitmq:
    image: 'rabbitmq:3.6-management-alpine'
    restart: always
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "admin"
    volumes:
      - thesisRabbitVolume:/var/lib/rabbitmq

  postgres:
    image: postgres:12.2-alpine
    restart: always
    volumes:  
      - thesisPostgresVolume:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=postgres 
      - POSTGRES_USER=postgres
    ports:
      - 5432:5432

  redis:
    image: "redis:alpine"
    restart: always
    command: redis-server --requirepass netorRedisPassword
    ports:
      - "6379:6379"
    volumes:
      - thesisRedisVolume:/var/lib/redis
      - thesisRedisDataVolume:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf 
    environment:
      - REDIS_REPLICATION_MODE=master

  mongo1:
    image: docker.io/bitnami/mongodb-sharded:4.2
    hostname: mongo1
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongo1
      - MONGODB_SHARDING_MODE=mongos
      - MONGODB_MONGOS_HOST=mongo1
      - MONGODB_CFG_PRIMARY_HOST=mongodb-cfg
      - MONGODB_CFG_REPLICA_SET_NAME=cfgreplicaset
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
      - MONGODB_ROOT_PASSWORD=root
    ports:
      - "27017:27017"

  secondary_mongo1:
    image: docker.io/bitnami/mongodb-sharded:4.2
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=secondary_mongo1
      - MONGODB_SHARDING_MODE=shardsvr
      - MONGODB_MONGOS_HOST=mongo1
      - MONGODB_ROOT_PASSWORD=root
      - MONGODB_USERNAME=catalogues
      - MONGODB_PASSWORD=catalogues 
      - MONGODB_DATABASE=catalogues 
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
      - MONGODB_REPLICA_SET_NAME=shard0
    volumes:
      - 'shard0_data:/bitnami'

  mongodb-cfg:
    image: docker.io/bitnami/mongodb-sharded:4.2
    volumes:
      - 'cfg_data:/bitnami'
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-cfg
      - MONGODB_SHARDING_MODE=configsvr
      - MONGODB_ROOT_PASSWORD=root
      - MONGODB_USERNAME=catalogues
      - MONGODB_PASSWORD=catalogues 
      - MONGODB_DATABASE=catalogues 
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
      - MONGODB_REPLICA_SET_NAME=cfgreplicaset

  netor_up_nginx: 
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 8000:80

  netor_coordinator:
    image: netor/coordinator
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    ports:
      - '5000:5000'
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASS: "postgres"
      POSTGRES_DB: "vsLCM"
      POSTGRES_IP: postgres
      APP_SECRET: "tenantManager"
      RABBIT_USER: "admin"
      RABBIT_PASS: "admin"
      RABBIT_IP: rabbitmq
      IDP_IP: netor_tenant
      CATALOGUE_IP: netor_catalogue
      DOMAIN_IP: netor_domain
      ENVIRONMENT: prod
      DNS_API_BASE_ENDPOINT: "http://pdns:8081/api"
      DNS_API_KEY: "secret"


  netor_domain:
    image: netor/domain
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    ports:
      - '5001:5001'
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASS: "postgres"
      POSTGRES_DB: "vsDomain"
      POSTGRES_IP: postgres
      APP_SECRET: "tenantManager"
      RABBIT_USER: "admin"
      RABBIT_PASS: "admin"
      RABBIT_IP: rabbitmq
      IDP_IP: netor_tenant
      ENVIRONMENT: prod

  netor_manager:
    image: netor/manager
    restart: always
    depends_on:
      - redis
      - rabbitmq
    ports:
      - '5555:5555'
    environment:
      APP_SECRET: "tenantManager"
      RABBIT_USER: "admin"
      RABBIT_PASS: "admin"
      RABBIT_IP: rabbitmq
      REDIS_HOST: redis
      ENVIRONMENT: prod

  netor_placement:
    image: netor/placement
    restart: always
    depends_on:
      - redis
      - rabbitmq
    environment:
      RABBIT_USER: "admin"
      RABBIT_PASS: "admin"
      RABBIT_IP: rabbitmq
      REDIS_HOST: redis
      ENVIRONMENT: prod

  netor_tenant:
    image: netor/tenant
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    ports:
      - '5002:5002'
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASS: "postgres"
      POSTGRES_DB: "vsTenant"
      POSTGRES_IP: postgres
      APP_SECRET: "tenantManager"
      RABBIT_USER: "admin"
      RABBIT_PASS: "admin"
      RABBIT_IP: rabbitmq
      ENVIRONMENT: prod

  netor_catalogue:
    image: netor/catalogue
    restart: always
    ports:
      - 5010:5010
    depends_on:
      - mongo1
    environment:
      APPLICATION_NAME: catalogues
      MONGO_USERNAME: catalogues
      MONGO_PASSWORD: catalogues
      MONGO_URL: mongo1
      MONGO_DB: catalogues
      SECRET_KEY: tenantManager
      RABBIT_HOST: rabbitmq
      RABBIT_USERNAME: admin
      RABBIT_PASSWORD: admin
      IDP_IP: netor_tenant
      IDP_PORT: 5002
      IDP_ENDPOINT: /validate
      ENVIRONMENT: prod

  # DNS SD
  db_dns:
    image: mariadb:latest
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
      - MYSQL_DATABASE=powerdnsadmin
      - MYSQL_USER=pdns
      - MYSQL_PASSWORD=mypdns
    ports:
      - 3306:3306
    restart: always
    volumes:
      - /pda-mysql:/var/lib/mysql
  pdns:
    #build: pdns
    image: pschiffe/pdns-mysql
    hostname: pdns
    domainname: computingforgeeks.com
    restart: always
    depends_on:
      - db_dns
    links:
      - "db_dns:mysql"
    ports:
      - "9000:53"
      - "9000:53/udp"
      - "8081:8081"
    environment:
      - PDNS_gmysql_host=db_dns
      - PDNS_gmysql_port=3306
      - PDNS_gmysql_user=pdns
      - PDNS_gmysql_dbname=powerdnsadmin
      - PDNS_gmysql_password=mypdns
      - PDNS_master=yes
      - PDNS_api=yes
      - PDNS_api_key=secret # Todo - Update on deployment
      - PDNSCONF_API_KEY=secret # Todo - Update on deployment
      - PDNS_webserver=yes
      - PDNS_webserver-allow-from=0.0.0.0/0
      - PDNS_webserver_address=0.0.0.0
      - PDNS_webserver_password=secret2 # Todo - Update on deployment
      - PDNS_version_string=anonymous
      - PDNS_default_ttl=1500
      - PDNS_allow_notify_from=0.0.0.0
      - PDNS_allow_axfr_ips=127.0.0.1

  web_app:
    image: ngoduykhanh/powerdns-admin:latest
    container_name: powerdns_admin
    ports:
      - "8080:80"
    depends_on:
      - db_dns
    restart: always
    links:
      - db_dns:mysql
      - pdns:pdns
    logging:
      driver: json-file
      options:
        max-size: 50m
    environment:
      - SQLALCHEMY_DATABASE_URI=mysql://pdns:mypdns@db_dns/powerdnsadmin
      - GUNICORN_TIMEOUT=60
      - GUNICORN_WORKERS=2
      - GUNICORN_LOGLEVEL=DEBUG

  # netor_portal:
  #   image: netor/portal
  #   restart: always
  #   ports:
  #     - '4200:4200'
  #   environment:
  #     NETOR_ENDPOINT: netor_up_nginx

volumes:
  thesisPostgresVolume:
    external: false
  thesisRabbitVolume:
    external: false
  thesisRedisVolume:
    external: false
  thesisRedisDataVolume:
    external: false
  #thesisMongo1ConfigVolume:
    #external: false
  #thesisMongo1DataVolume:
    #external: false
    #driver:
  #thesisMongo2ConfigVolume:
    #external: false
  shard0_data:
    driver: local
  cfg_data:
    driver: local
  #thesisMongo3DataVolume:
    #external: false